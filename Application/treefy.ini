[Command]
Name=Treefy
Command="
    copyq:
    /**
     * Normalize text replacing initial characters to tabs
     * Replace first '#' with ''
     * Then convert 2 spaces to tab and '#' to tab
     * @param text Text
    */
    function normalizeText(text) {
      text = text.replace(/^\\# ?/gm, '');
      text = text.replace(/(  |\\# ?)/gm, '\\t');
      return text;
    }
    
    /**
     * Get number of tabs
     * @param line Line
     */
    function getTabs(line) {
      return (line.match(/^\\t+/g) || []).toString().length;
    }
    
    /**
     * Search last node with specific key and value
     * @param nodes Array of nodes
     * @param key Key
     * @param value Value
     */
    function lastIndexOf(nodes, key, value) {
      for (var i = nodes.length - 1; i >= 0; i--) {
        if (nodes[i][key] == value) {
          return i;
        }
      }
      return -1;
    }
    
    /**
     * Print father's children
     * @param children Array of children
     * @param tabs Initial indentation
     */
    function printChildren(children, tabs) {
      var numberChildren = children.length;
      var child = {}, childTabs = '', string = '';
    
      if (numberChildren == 0)
        return;
    
      for (var i = 0; i < numberChildren; i++) {
        child = nodes[children[i]];
    
        // Print tabs
        string = tabs;
    
        // Check if is the last child
        // Print tree and get child tabs
        if (i == numberChildren - 1) {
          string += lastElement;
          childTabs = tabs + '   ';
        } else {
          string += intermediateElement;
          childTabs = tabs + verticalElement + '  ';
        }
    
        // Print node string
        string += child.string + '\\n';
    
        tree += string;
    
        printChildren(child.children, childTabs)
      }
    }
    
    var verticalElement = '\x2502';
    var lastElement = '\x2514\x2500 ';
    var intermediateElement = '\x251c\x2500 ';
    
    var tree = '';
    var text = str(read(currentItem()));
    var lines = [], line = '';
    var nodes = [], node = {};
    var length = 0, tabs = -1, father = {}, fatherTabs = -1;
    var rootElement = dialog('.title', 'Root element', 'Root element name?', '.');
    var offset = 0;
    
    // Normalize text
    text = normalizeText(text);
    
    // Get lines
    lines = text.split(/\\r?\\n/);
    
    // Add root element
    if (rootElement) {
      offset = 1;
      nodes.push({
        index: 0,
        tabs: 0,
        father: null,
        children: [],
        string: rootElement
      });
    }
    
    // Main loop
    for (var i = 0; i < lines.length; i++) {
      // Clear
      node = {};
      tabs = -1;
      father = null;
      fatherTabs = -1;
      line = lines[i];
    
      // Get number of tabs
      tabs = getTabs(line) + offset;
    
      // Search father
      if (tabs > 0) {
        // Father's tabs
        fatherTabs = tabs - 1;
    
        // Read last node that have the number of tabs
        father = nodes[lastIndexOf(nodes, 'tabs', fatherTabs)];
    
        // Add child index to fathers node
        if (father !== undefined) {
          father.children.push(i + offset);
        }
      }
    
      // Add node
      node.index = i + offset;
      node.tabs = tabs;
      node.father = father ? father.index : null;
      node.children = [];
      node.string = line.trim();
      nodes.push(node);
    }
    
    // Print tree
    for (var i = 0; i < nodes.length; i++) {
      node = nodes[i];
      if(node.tabs !== 0)
        continue;
      tree += node.string + '\\n';
      printChildren(node.children, '');
    }
    
    // Remove whitespace characters
    tree = tree.trim();
    
    // Create html
    var html = '<html><body><div style=\"font-family: Consolas;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\">' + escapeHtml(tree) + '</div></body></html>';
    
    // Write
    write(mimeText, tree, mimeHtml, html);"
InMenu=true
Icon=\xf1bb